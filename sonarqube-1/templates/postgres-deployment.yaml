apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: fix-permissions
          image: busybox
          command:
            - sh
            - -c
            - |
              chown -R 999:999 /var/lib/postgresql/data && chmod 700 /var/lib/postgresql/data
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: postgres
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: {{ .Values.postgres.auth.database | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.postgres.auth.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.auth.existingSecret }}
                  key: {{ .Values.postgres.auth.existingSecretKey }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: {{ .Values.postgres.resources.requests.cpu | quote }}
              memory: {{ .Values.postgres.resources.requests.memory | quote }}
            limits:
              cpu: {{ .Values.postgres.resources.limits.cpu | quote }}
              memory: {{ .Values.postgres.resources.limits.memory | quote }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "{{ .Values.postgres.auth.username }}"]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "{{ .Values.postgres.auth.username }}"]
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
